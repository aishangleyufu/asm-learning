;;位空间定义
        B_CURSOR BIT     00H
;;内部RAM空间
        LED_BUF  EQU     28H          ;;LED显示缓存28H~2FH

        DELH     EQU     30H
        DELL     EQU     31H
;;按键相关寄存器
        KEYCODE  EQU     32H
        LASTCODE EQU     33H
        N_SAME   EQU     34H
        TEMP     EQU     35H
        N_DISP   EQU     36H
;;光标位置
        CURSOR   EQU     37H
;;时钟相关寄存器
        T_2MS    EQU    40H             ;;2ms定时计数
        T_100MS  EQU    41H             ;;100ms定时计数

        SECOND  EQU     42H
        MINUTE  EQU     43H
        HOUR    EQU     44H

        ORG     0000H
        LJMP    BEGIN

        ORG     000BH
        LJMP    TIMER0_INT



        ORG     0100H
BEGIN:
        MOV     SP,#70H

;;按键初始化
        MOV     KEYCODE,#0FFH
        MOV     LASTCODE,#0FFH
        MOV     N_SAME,#0
;;LED显示初始化
        MOV     R1,#8
        MOV     R0,#LED_BUF
CLRLOOP:
        MOV     @R0,#0FAH
        INC     R0
        DJNZ    R1,CLRLOOP
        ;MOV R1,#8
;CLRLOOP2:
        ;MOV     @R0,#00H
        ;INC     R0
        ;DJNZ    R1,CLRLOOP


;;显示时间值初始化
        LCALL   INI_TIMER

LOOP:
       LJMP    LOOP



;;定时器T0初始化
INI_TIMER:
        MOV     T_2MS,#0
        MOV     T_100MS,#0
        MOV     TMOD,#01H               ;;TIMER0 MODE1
        MOV     TCON,#0
        MOV     TH0,#0F0H
        MOV     TL0,#30H               ;;2mS
        SETB    TR0
        SETB    ET0
        SETB    EA
        RET
;;定时器中断
TIMER0_INT:
        PUSH    ACC
        PUSH    PSW
        LCALL TIMER              ;;时钟运行

        LCALL   KEY_SCAN         ;;键盘扫描
        LCALL   DO_KEY           ;;根据键码值运行相应操作


        LCALL   DISP_LED         ;;LED显示
        POP     PSW
        POP     ACC
        RETI

;;内部时钟运行
;;INPUT:NONE
;;OUTPUT:TIP,SECOND,MINUTE,HOUR
;;INFLUENCED:ACC

TIMER:
        MOV     TH0,#0F0H
        MOV     TL0,#30H               ;;2mS
TIMER0_RET:
        RET

;;按键处理
;;INPUT:KEYCODE
;;OUTPUT:
;;INFLUENCED:ACC
;;
DO_KEY:
        MOV     A,KEYCODE
        CJNE    A,#01H,KEY_2
        MOV R1,#2FH
        MOV A,@R1
        CJNE A,#09,GO1
        AGAIN1:
        MOV A,@R1
        MOV R1,#2EH
        MOV @R1,A
        MOV 2FH,#1

        MOV A,2EH


        CJNE A,#0FAH,MUL101
        MOV 22H,#1
        LJMP KEY_RET
        
        MUL101:
        MOV R3,A
        RL A
        RL A
        RL A
        ADD A,R3
        ADD A,R3
        MOV R4,2FH
        ADD A,R4
        MOV 22H,A

        LJMP KEY_RET
        GO1:JC GO11
        MOV 2FH,#0FAH
        SJMP AGAIN1
        GO11:SJMP AGAIN1
KEY_2:
        CJNE    A,#02H,KEY_3
        CLR C
        MOV R1,#2FH
        MOV A,@R1
        CJNE A,#09,GO2
        AGAIN2:
        MOV A,@R1
        MOV R1,#2EH
        MOV @R1,A
        MOV 2FH,#2

        MOV A,2EH
        CJNE A,#0FAH,MUL102
        MOV 22H,#2
        LJMP KEY_RET
        
        MUL102:
        MOV R3,A
        RL A
        RL A
        RL A
        ADD A,R3
        ADD A,R3
        MOV R4,2FH
        ADD A,R4
        MOV 22H,A

       LJMP KEY_RET

        GO2:JC GO22
        MOV 2FH,#0FAH
        SJMP AGAIN2
        GO22:SJMP AGAIN2
KEY_3:
        CJNE    A,#03H,KEY_4
        MOV R1,#2FH
        MOV A,@R1
        CJNE A,#09,GO3
        AGAIN3:
        MOV A,@R1
        MOV R1,#2EH
        MOV @R1,A
        MOV 2FH,#3


        MOV A,2EH
        
        CJNE A,#0FAH,MUL103
        MOV 22H,#3
        LJMP KEY_RET
        
        MUL103:
        MOV R3,A
        RL A
        RL A
        RL A
        ADD A,R3
        ADD A,R3
        MOV R4,2FH
        ADD A,R4
        MOV 22H,A

        LJMP    KEY_RET
        GO3:JC GO33
        MOV 2FH,#0FAH
        SJMP AGAIN3
        GO33:SJMP AGAIN3
KEY_4:
        CJNE    A,#04H,KEY_5
        MOV R1,#2FH
        MOV A,@R1
        CJNE A,#09,GO4
        AGAIN4:
        MOV A,@R1
        MOV R1,#2EH
        MOV @R1,A
        MOV 2FH,#4

        MOV A,2EH
        CJNE A,#0FAH,MUL104
        MOV 22H,#4
        LJMP KEY_RET
        
        MUL104:
        
        MOV R3,A
        RL A
        RL A
        RL A
        ADD A,R3
        ADD A,R3
        MOV R4,2FH
        ADD A,R4
        MOV 22H,A

        LJMP    KEY_RET
        GO4:JC GO44
        MOV 2FH,#0FAH
        SJMP AGAIN4
        GO44:SJMP AGAIN4
KEY_5:
        CJNE    A,#05H,KEY_6
        MOV R1,#2FH
        MOV A,@R1
        CJNE A,#09,GO5
        AGAIN5:
        MOV A,@R1
        MOV R1,#2EH
        MOV @R1,A
        MOV 2FH,#5

        MOV A,2EH
        
        CJNE A,#0FAH,MUL105
        MOV 22H,#5
        LJMP KEY_RET
        
        MUL105:
        MOV R3,A
        RL A
        RL A
        RL A
        ADD A,R3
        ADD A,R3
        MOV R4,2FH
        ADD A,R4
        MOV 22H,A

        LJMP    KEY_RET
        GO5:JC GO55
        MOV 2FH,#0FAH
        SJMP AGAIN5
        GO55:SJMP AGAIN5
KEY_6:
        CJNE    A,#06H,KEY_7
        MOV R1,#2FH
        MOV A,@R1
        CJNE A,#09,GO6
        AGAIN6:
        MOV A,@R1
        MOV R1,#2EH
        MOV @R1,A
        MOV 2FH,#6


        MOV A,2EH
        CJNE A,#0FAH,MUL106
        MOV 22H,#6
        LJMP KEY_RET
        
        MUL106:
        MOV R3,A
        RL A
        RL A
        RL A
        ADD A,R3
        ADD A,R3
        MOV R4,2FH
        ADD A,R4
        MOV 22H,A

        LJMP    KEY_RET
        GO6:JC GO66
        MOV 2FH,#0FAH
        SJMP AGAIN6
        GO66:SJMP AGAIN6
KEY_7:
        CJNE    A,#07H,KEY_8
        MOV R1,#2FH
        MOV A,@R1
        CJNE A,#09,GO7
        AGAIN7:
        MOV A,@R1
        MOV R1,#2EH
        MOV @R1,A
        MOV 2FH,#7


        MOV A,2EH
        CJNE A,#0FAH,MUL107
        MOV 22H,#7
        LJMP KEY_RET
        
        MUL107:
        
        MOV R3,A
        RL A
        RL A
        RL A
        ADD A,R3
        ADD A,R3
        MOV R4,2FH
        ADD A,R4
        MOV 22H,A

        LJMP    KEY_RET
        GO7:JC GO77
        MOV 2FH,#0FAH
        SJMP AGAIN7
        GO77:SJMP AGAIN7
KEY_8:
        CJNE    A,#08H,KEY_9
        MOV R1,#2FH
        MOV A,@R1
        CJNE A,#09,GO8
        AGAIN8:
        MOV A,@R1
        MOV R1,#2EH
        MOV @R1,A
        MOV 2FH,#8


        MOV A,2EH
        CJNE A,#0FAH,MUL108
        MOV 22H,#8
        LJMP KEY_RET
        
        MUL108:
        MOV R3,A
        RL A
        RL A
        RL A
        ADD A,R3
        ADD A,R3
        MOV R4,2FH
        ADD A,R4
        MOV 22H,A

        LJMP    KEY_RET
        GO8:JC GO88
        MOV 2FH,#0FAH
        SJMP AGAIN8
        GO88:SJMP AGAIN8
KEY_9:
        CJNE    A,#09H,KEY_0
        MOV R1,#2FH
        MOV A,@R1
        CJNE A,#09,GO9
        AGAIN9:
        MOV A,@R1
        MOV R1,#2EH
        MOV @R1,A
        MOV 2FH,#9


        MOV A,2EH

       CJNE A,#0FAH,MUL109
        MOV 22H,#9
        LJMP KEY_RET
        
        MUL109:
        MOV R3,A
        RL A
        RL A
        RL A
        ADD A,R3
        ADD A,R3
        MOV R4,2FH
        ADD A,R4
        MOV 22H,A

        LJMP    KEY_RET
        GO9:JC GO99
        MOV 2FH,#0FAH
        SJMP AGAIN9
        GO99:SJMP AGAIN9
KEY_0:
        CJNE    A,#00H,KEY_13
        MOV R1,#2FH
        MOV A,@R1
         CJNE A,#09,GO0
        AGAIN0:
        MOV A,@R1
        MOV R1,#2EH
        MOV @R1,A
        MOV 2FH,#00H


        MOV A,2EH


      CJNE A,#0FAH,MUL100
        MOV 22H,#0
        LJMP KEY_RET
        
        MUL100:
        MOV R3,A
        RL A
        RL A
        RL A
        ADD A,R3
        ADD A,R3
        MOV R4,2FH
        ADD A,R4
        MOV 22H,A

        LJMP    KEY_RET
        GO0:JC GO00
        MOV 2FH,#0FAH
        SJMP AGAIN0
        GO00:SJMP AGAIN0
KEY_13:
        CJNE    A,#0CH,KEY_14
        MOV 2FH,#0CH
        MOV 2EH,#0AH
        MOV 21H,#0AH
        MOV A,22H
        MOV 20H,A
        MOV 22H,#00H
        LJMP    KEY_RET
KEY_14:
        CJNE    A,#0DH,KEY_15
        MOV 2FH,#0DH
        MOV 2EH,#0AH
        MOV 21H,#0BH
        MOV A,22H
        MOV 20H,A
        MOV 22H,#00H
        LJMP    KEY_RET
KEY_15:
        CJNE    A,#0EH,KEY_16
        MOV 2FH,#0EH
        MOV 2EH,#0AH
        MOV 21H,#0CH
        MOV A,22H
        MOV 20H,A
        MOV 22H,#00H
        LJMP    KEY_RET
KEY_16:
        CJNE    A,#0FH,KEY_CLEAR
        MOV 2FH,#0FH
        MOV 2EH,#0AH
        MOV 21H,#0DH
        MOV A,22H
        MOV 20H,A
        MOV 22H,#00H
        LJMP    KEY_RET
KEY_CLEAR:
        CJNE    A,#0AH,KEY_17
        MOV R2,#8
        MOV R1,#LED_BUF
        MOV 60H,@R1
        CIR:
        MOV A,60H
        MOV R3,A
        INC R1
        MOV A,@R1
        MOV 60H,A
        MOV A,R3
        MOV @R1,A
        DJNZ R2,CIR    
        GOS:LJMP    KEY_RET
KEY_17: CJNE A,#0BH,GOS
; 20H-22H,53H-5DH is used
; oprand1 at 20H, oprand2 at 22H, opcode at 21H
; answer
; digit3 at 56H, digit2 at 57H, digit1 at 58H, digit0 at 59H
; division has its fraction part at 5AH, 5BH, 5CH, 5DH
; sign flag 0000000SH at 55H


;branch according to the opcode at 21H
CALC:             MOV		A,21H
                        CLR             C
                        SUBB	        A,#0AH
			JZ		ADD_CALL	;0AH
			DEC		A
			JZ		SUB_CALL	;0BH
			DEC		A
			JZ		MUL_CALL	;0CH
			DEC		A
			JZ		DIV_CALL	;0DH

ADD_CALL:	LCALL	ADD_SBRT

			LJMP	DONE
SUB_CALL:	LCALL	SUB_SBRT
			LJMP	DONE
MUL_CALL:	LCALL	MUL_SBRT
			LJMP	DONE
DIV_CALL:	LCALL	DIV_SBRT
			LJMP	DONE

			;oprend1 at 20H signal extension at 23H
ADD_SBRT:	MOV		A,20H
			ANL		A,#80H	;get the MSB
			RL		A		;shift the MSB to LSB
			MOV		53H,A
			CLR		A
			SUBB	A,53H
			MOV		53H,A

			;oprend2 at 22H signal extension at 24H
			MOV		A,22H
			ANL		A,7FH	;get the MSB
			RL		A		;shift the MSB to LSB
			MOV		54H,A
			CLR		A
			SUBB	A,54H
			MOV		54H,A

			;ADD operation, H at 25H, L at 26H
			CLR		C
			MOV		A,20H
			ADDC	A,22H
			MOV		56H,A
			MOV		A,53H
			ADDC	A,54H
			MOV		55H,A	;store high bit

			;get sign,27H=0000000S 28H=SSSSSSSS
			ANL		A,7FH
			RL		A
			MOV		57H,A
			MOV		59H,A
			CLR		A
			SUBB	A,59H
			MOV		58H,A

			;get absolute value of H at 25H and L at 26H, answer H at 23H, L at 24H
			;inverting
			MOV		A,55H
			XRL		A,58H	;invert
			MOV		55H,A
			MOV		A,56H
			XRL		A,58H   ;invert
			;MOV	26H,A
			;increasing
			CLR		C
			;MOV	A,26H
			ADDC	A,57H	;add 1
			MOV		54H,A
			MOV		A,55H
			ADDC	A,#00H
			MOV		53H,A

			; put sign at 25H
			MOV		55H,57H

			;end of subroutine
			RET

			;oprend1 signal extension
SUB_SBRT:	MOV		A,20H
			ANL		A,#80H
			RL		A
			MOV		53H,A
			CLR		A
			SUBB	A,53H
			MOV		53H,A

			;oprend2 signal extension
			MOV		A,22H
			ANL		A,#80H
			RL		A
			MOV		54H,A
			CLR		A
			SUBB	A,54H
			MOV		54H,A

			;SUB operation, H at 25H, L at 26H
			CLR		C
			MOV		A,20H
			SUBB	A,22H
			MOV		56H,A
			MOV		A,53H
			SUBB	A,54H
			MOV		55H,A	;store high bit

			;get sign, 27H=0000000S 28H=SSSSSSSS
			;27H=0000000S
			;MOV		A,25H
			ANL		A,#80H
			RL		A
			MOV		57H,A
			;28H=SSSSSSSS
			MOV		59H,A
			CLR		A
			CLR		C
			SUBB	A,59H
			MOV		58H,A

			;get absolute value of H at 25H and L at 26H
			;answer H at 23H, L at 24H
			;inverting
			MOV		A,55H
			XRL		A,58H	;invert
			MOV		55H,A
			MOV		A,56H
			XRL		A,58H   ;invert
			;MOV	26H,A
			;increasing
			CLR		C
			;MOV	A,26H
			ADDC	A,57H	;add 1
			MOV		54H,A
			MOV		A,55H
			ADDC	A,#00H
			MOV		53H,A

			;put sign at 25H
			MOV		55H,57H

			;end of subroutine
			RET

			;get sign of answer, 27H=0000000S, 28H=SSSSSSSS
MUL_SBRT:	MOV		A,20H
			ANL		A,#80H
			RL		A
			MOV		53H,A
			MOV		A,22H
			ANL		A,#80H
			RL		A
			XRL		A,53H	;get the sign
			MOV		57H,A	;27H=0000000S
			MOV		59H,A
			CLR		A
			SUBB	A,59H
			MOV		58H,A	;28H=SSSSSSSS



			;MUL operation, H at 25H, L at 26H
			MOV 	A,20H;
			MOV 	B,22H;
			MUL		AB;
			MOV		55H,B
			MOV		56H,A

			;get absolute value of H at 25H and L at 26H
			;answer H at 23H, L at 24H
			;inverting
			MOV		A,55H
			XRL		A,58H	;invert
			MOV		55H,A
			MOV		A,56H
			XRL		A,58H   ;invert
			;MOV	26H,A
			;increasing
			CLR		C
			;MOV	A,26H
			ADDC	A,57H	;add 1
			MOV		54H,A
			MOV		A,55H
			ADDC	A,#00H
			MOV		53H,A

			;put sign at 25H
			MOV		55H,57H

			;end of subroutine
			RET

			;get sign of answer, 27H=0000000S, 28H=SSSSSSSS
DIV_SBRT:	MOV		A,20H
			ANL		A,#80H
			RL		A
			MOV		53H,A
			MOV		A,22H
			ANL		A,#80H
			RL		A
			XRL		A,53H	;get the sign
			MOV		57H,A	;27H=0000000S
			MOV		59H,A
			CLR		A
			SUBB	A,59H
			MOV		58H,A	;28H=SSSSSSSS

			;get absolute value of oprend1 at 25H and oprend2 at 26H
			;answer: oprend1 at 25H, oprend2 at 26H
			;25H is 0
			;op1
			MOV		A,20H
			MOV		C,ACC.7
			JNC		OP1_POS
OP1_NEG:	XRL		A,58H	;invert
			ADD		A,57H	;increase
OP1_POS:	MOV		55H,A
			;op2
			MOV		A,22H
			MOV		C,ACC.7
			JNC		OP2_POS
OP2_NEG:	XRL		A,58H	;invert
			ADD		A,57H	;increase
OP2_POS:	MOV		56H,A




			;DIV operation, Q at 25H, R is for fraction
			MOV 	A,55H;
			MOV 	B,56H;
			DIV		AB;
			MOV		54H,A;
			MOV		58H,B;
			MOV		53H,#00H;

			;put sign at 25H
			MOV		55H,57H

			;get fraction
			MOV		5AH,#00H;
			MOV		5BH,#00H;
			MOV		5CH,#00H;
			MOV		5DH,#00H;
			;divider at 26H, reminder at 28H
			MOV		A,B;quotient at A
		;calculate fraction digit1 at 30H
			MOV		R3,#09H; multiplied by 10
FRAC1:		ADD		A,B;
			CLR		C;
			SUBB	A,56H;
			MOV		C,ACC.7;
			JNC		FRAC1_INC
FRAC1_NINC:	ADD		A,56H	;recover
			DEC		5AH;
FRAC1_INC:	INC		5AH		;franction digit increased
			DJNZ	R3,FRAC1;
			MOV		B,A
		;calculate fraction digit2 at 31H
			MOV		R3,#09H; multiplied by 10
FRAC2:		ADD		A,B;
			CLR		C;
			SUBB	A,56H;
			MOV		C,ACC.7;
			JNC		FRAC2_INC
FRAC2_NINC:	ADD		A,56H	;recover
			DEC		5BH;
FRAC2_INC:	INC		5BH		;franction digit increased
			DJNZ	R3,FRAC2;
			MOV		B,A
		;calculate fraction digit3 at 32H
			MOV		R3,#09H; multiplied by 10
FRAC3:		ADD		A,B;
			CLR		C;
			SUBB	A,56H;
			MOV		C,ACC.7;
			JNC		FRAC3_INC
FRAC3_NINC:	ADD		A,56H	;recover
			DEC		5CH;
FRAC3_INC:	INC		5CH		;franction digit increased
			DJNZ	R3,FRAC3;
			MOV		B,A
		;calculate fraction digit3 at 32H
			MOV		R3,#09H; multiplied by 10
FRAC4:		ADD		A,B;
			CLR		C;
			SUBB	A,56H;
			MOV		C,ACC.7;
			JNC		FRAC4_INC
FRAC4_NINC:	ADD		A,56H	;recover
			DEC		5DH;
FRAC4_INC:	INC		5DH		;franction digit increased
			DJNZ	R3,FRAC4;


			RET


;BIN2BCD
; H at 23H, L at 24H, sign at 25H
; digit3 at 26H, digit2 at 27H, digit1 at 28H, digit0 at 29H
			;clear
DONE:		MOV		56H,00H;
			MOV		57H,00H;
			MOV		58H,00H;
			MOV		59H,00H;

			;
				;subtract 1000
DIGIT3_LOOP:	CLR		C
				MOV		A,54H
				SUBB	A,#0E8H	;L of 1000
				MOV		54H,A
				MOV		A,53H
				SUBB	A,#03H	;H of 1000
				MOV		53H,A
				;count digit3
				INC		56H
				;test if less than zero
				MOV		C,ACC.7
				JNC		DIGIT3_LOOP		;jump if subtracting not over

			;recover the last subtraction
				DEC		56H
				CLR		C
				MOV		A,54H
				ADDC	A,#0E8H	;L of 1000
				MOV		54H,A
				MOV		A,53H
				ADDC	A,#03H	;H of 1000
				MOV		53H,A

				;subtract 100
DIGIT2_LOOP:	CLR		C
				MOV		A,54H
				SUBB	A,#64H	;L of 100
				MOV		54H,A
				MOV		A,53H
				SUBB	A,#00H	;H of 100
				MOV		53H,A
				;count digit3
				INC		57H
				;test if less than zero
				MOV		C,ACC.7
				JNC		DIGIT2_LOOP		;jump if subtracting not over

			;recover the last subtraction
				DEC		57H
				CLR		C
				MOV		A,54H
				ADDC	A,#64H	;L of 100
				MOV		54H,A
				MOV		A,53H
				ADDC	A,#00H	;H of 100
				MOV		53H,A

				;subtract 10
DIGIT1_LOOP:	CLR		C
				MOV		A,54H
				SUBB	A,#0AH	;10
				MOV		54H,A
				;count digit3
				INC		58H
				;test if less than zero
				MOV		C,ACC.7
				JNC		DIGIT1_LOOP		;jump if subtracting not over

			;recover the last subtraction
				DEC		58H
				CLR		C
				MOV		A,54H
				ADDC	A,#0AH	;10
				MOV		54H,A

				;directly move as the BCD of digit0
DIGIT0_LOOP:	MOV		59H,54H

PRESENT:MOV A,21H
      CJNE A,#0DH,TRAN
           MOV 28H,57H
           MOV 29H,58H
           MOV 2AH,59H
           MOV 2BH,#14
           MOV 2CH,5AH
           MOV 2DH,5BH
           MOV 2EH,5CH
           MOV 2FH,5DH
           LJMP  BACK
       TRAN:MOV 2CH,56H
            MOV 2DH,57H
            MOV 2EH,58H
            MOV 2FH,59H

BACK:
   LJMP KEY_RET
 
KEY_RET:
        MOV     KEYCODE,#0FFH
        RET

;;键盘扫描
;;INPUT:P1，P2
;;OUTPUT:KEYCODE
;;INFLUENCED:LASTCODE-上次采样的键码
;;           N_SAME -采样到相同键码的次数
;;DPTR
KEY_SCAN:
        MOV     P1,#0F0H
        NOP
        MOV     A,P1
        ANL     A,#0F0H
        MOV     B,A
        MOV     P1,#0FH
        NOP
        MOV     A,P1
        ANL     A,#0FH
        ORL     A,B
        MOV     DPTR,#TAB_KEY                             ;设置断点查表可得，表中所对应值
        MOVC    A,@A+DPTR
                                                          ;设置断点查表可自行设置对应值
        CJNE    A,LASTCODE,GET_NEW_KEY
        MOV     A,N_SAME
        CJNE    A,#3,GET_NEXT                          ;判断长按，但输入相等次数为3以上时，确定为长按，执行下一步程序。
;;新键码
        MOV     KEYCODE,LASTCODE                        ;按键相同经过3次检验才会lastcode认定为有效值，赋值入keycode
KEY_EXIT:
        INC     N_SAME
        RET
GET_NEXT:
        JC      KEY_EXIT
        RET
GET_NEW_KEY:
        MOV     LASTCODE,A
        MOV     N_SAME,#0
        RET

TAB_KEY:
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;0-10H
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;10-1FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;20-2FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;30-3FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;40-4FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;50-5FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;60-6FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,01H,0FFH,0FFH,0FFH,05H,0FFH,09H,0CH,0FFH ;70-7FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH  ;80-8FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH  ;90-9FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH  ;A0-AFH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,02H,0FFH,0FFH,0FFH,06H,0FFH,00H,0DH,0FFH  ;B0-BFH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH  ;C0-CFH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,03H,0FFH,0FFH,0FFH,07H,0FFH,0AH,0EH,0FFH  ;D0-DFH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,04H,0FFH,0FFH,0FFH,08H,0FFH,0BH,0FH,0FFH  ;E0-EFH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH  ;F0-FFH



;;LED动态扫描
;;INPUT:LED_BUF
;;OUTPUT:KEYCODE
;;INFLUENCED:Acc，DPTR
DISP_LED:
        MOV     A,#LED_BUF
        ADD     A,N_DISP
        MOV     R0,A
        MOV     A,@R0
        MOV     DPTR,#TAB_LED
        ANL     A,#0FH
        MOVC    A,@A+DPTR
        MOV     P0,A

        MOV     A,#0FFH                         ;循坏位选程序
        CLR     C
        INC     N_DISP                          ;每次加1移位
        MOV     R0,N_DISP
LOOP_D1:
        RLC     A
        DJNZ    R0,LOOP_D1                      ;通N-DISP,确定第几次扫描，需要移位几次。
        MOV     P2,A
        ANL     N_DISP,#07H                     ;但N=8时，要变回0.
        RET




TAB_LED:
        DB      28H,7EH,0A2H,62H,74H
        DB      61H,21H,7AH,20H,60H
        DB      0FFH,0FFH,30H,0F7H,0DFH,0B6H
