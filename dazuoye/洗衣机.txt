                                                        ;;位空间定义
;;步进电机
        B_MOTOR  BIT    01H          ;;=1启动
        B_FORWARD       BIT     02H      ;;正向/反向标志


;;IO定义
PAOMA2 BIT P3.4
PAOMA1 BIT P3.5
;;液晶相关
        RS       BIT     P2.0
        RW       BIT     P2.1
        E        BIT     P2.2
        PSB      BIT     P2.3
        RST      BIT     P2.4

;;AD相关
        AD_RD    BIT     P2.6
        AD_WR    BIT     P2.7
;;电机控制
        MOTOR_P1        BIT     P3.0
        MOTOR_P2        BIT     P3.1
        MOTOR_P3        BIT     P3.2
        MOTOR_P4        BIT     P3.3
;;24c02 EEPROM
        SCL     BIT     P3.6
        SDA     BIT     P3.7

;;内部RAM空间

        DELH     EQU     30H
        DELL     EQU     31H
;;按键相关寄存器
        KEYCODE  EQU     32H
        LASTCODE EQU     33H
        N_SAME   EQU     34H
        TEMP     EQU     35H
        N_DISP   EQU     36H
;;光标位置
        CURSOR   EQU     37H
        LCD_DELAY EQU    38H
        LCD_MODE  EQU    39H
        LAST_LCD_MODE EQU 3AH
;;洗衣相关
        XIYITIMER EQU 3BH
        XIYICISHU EQU 3CH
        ROWSET EQU 3DH
        TUOSHUITIMER EQU 3EH
        WATERLEVEL EQU 3FH
        WATERANANUM EQU 4AH
        XIYITIMER2 EQU 5FH
        TUOSHUITIMER2 EQU 5EH
;;时钟相关寄存器
        T_2MS    EQU    40H             ;;2ms定时计数
        T_100MS  EQU    41H             ;;100ms定时计数

        SECOND  EQU     42H
        MINUTE  EQU     43H
        MODE    EQU     44H

        COUNT   EQU     45H

        MOTOR_STEP      EQU     46H
        MOTOR_DELAY     EQU     47H
        SADDH           EQU     48H
        SADDL           EQU     49H
        JIQI_DELAY      EQU     4BH

        DISP_BUF        EQU     50H
        IIC_DELAY       EQU   59H
        LED_BUF1         EQU     4CH
        LED_BUF2         EQU    5AH 
        IIC_BUF         EQU     60H


        ORG     0000H


        LJMP    BEGIN

        ORG     000BH
        LJMP    TIMER0_INT



        ORG     0100H
BEGIN:
        MOV     SP,#0E0H
;;电机控制初始化
        setb     B_MOTOR
        SETB    B_FORWARD
;;按键初始化
         LCALL IIC2 
        MOV     KEYCODE,#0FFH
        MOV     LASTCODE,#0FFH
        MOV     N_SAME,#0
        MOV LCD_MODE ,#0
        MOV LAST_LCD_MODE,#0
        MOV XIYITIMER,#0
        MOV XIYITIMER2,#0
        MOV XIYICISHU,#0
        MOV ROWSET,#0
        MOV TUOSHUITIMER,#0
        MOV TUOSHUITIMER2,#0
        MOV WATERLEVEL,#0
        MOV WATERANANUM,#0
        MOV JIQI_DELAY,#0
        MOV 50H,#0


;;显示时间值初始化
        LCALL   INI_LCD
        LCALL   DISP_LCD1
        LCALL   INI_TIMER
      ; MOV     R0,#10H
      ; MOV     R1,#DISP_BUF
      ; DISP_LOOP1:
      ; MOV     @R1,#20H
      ;  INC     R1
      ;  DJNZ    R0,DISP_LOOP1

LOOP:
        INC     IIC_DELAY
        MOV     A,IIC_DELAY
        LCALL DELAY2MS
        CJNE    A,#255,LOOP1
        CLR EA
        LCALL   IIC1
        SETB    EA
        MOV IIC_DELAY,#0
        LOOP1:
        LCALL   READ_ADC
        LCALL PAOMADENG
        LCALL   CURSORSET         ;;根据键码值运行相应操作
        LCALL   DO_KEY
        LCALL   WATERLEVELDO
        LCALL   FANG_WATER
        LCALL   DISP
        LJMP    LOOP
;;定时器T0初始化
INI_TIMER:
        MOV     T_2MS,#0
        MOV     T_100MS,#0
        MOV     SECOND,#1
        MOV     MINUTE,#10
        MOV     TMOD,#01H               ;;TIMER0 MODE1
        MOV     TCON,#0
        MOV     TH0,#0F8H
        MOV     TL0,#30H               ;;2mS
        SETB    TR0
        SETB    ET0
        SETB    EA
        RET
 ;;光标设置80H，88H,90H,98H
 
IIC1:
        MOV     SADDH,#0
        MOV     SADDL,#0
        MOV 60H,LCD_MODE
        MOV 61H,XIYICISHU
        MOV 62H,XIYITIMER
        MOV 63H,XIYITIMER2
        MOV 64H,TUOSHUItimer
        MOV 65H,TUOSHUITIMER2
        MOV 66H,WATERLEVEL
        MOV 67H,SECOND
        MOV     R1,#IIC_BUF
        MOV     R2,#8
       LCALL   W24C
        LCALL   DELAY2MS
        RET
IIC2:
        MOV     SADDH,#0
        MOV     SADDL,#0
        MOV     R1,#IIC_BUF+8
                MOV     R2,#8
        LCALL   R24C
        LCALL   DELAY2MS
       RET

PAOMADENG:
MOV A,LCD_MODE
CJNE A,#5,PAOPAO2
CLR PAOMA1
SJMP MASTOP
PAOPAO2:
CJNE A,#7,PAOSTOP
CLR PAOMA2
SJMP MASTOP
PAOSTOP:
SETB PAOMA1
SETB PAOMA2
MASTOP:
RET
CURSORSET:
        MOV A,LCD_MODE
        CJNE A,#3,NNFINISH
        CLEAR_CURSOR:
        MOV A,#80H
        LCALL SEND_I
    	MOV A,#20H
        LCALL SEND_D
        MOV A,#88H
        LCALL SEND_I
    	MOV	A,#20H
        LCALL SEND_D
        MOV A,#90H
        LCALL SEND_I
        LCALL SEND_D
    	MOV	A,#20H
           MOV A,#98H
        LCALL SEND_I
    	MOV	A,#20H
        LCALL SEND_D
        DISP_CURSOR:
        MOV A,ROWSET
        CJNE A,#1,CUR2
        MOV A,#80H
        SJMP CURSOR_SEND
        CUR2:
        CJNE A,#2,CUR3
        MOV A,#90H
        SJMP CURSOR_SEND
        CUR3:
        CJNE A,#3,CUR4
        MOV A,#88H
        SJMP CURSOR_SEND
        CUR4:
        CJNE A,#4,CUR5
        MOV A,#98H
        SJMP CURSOR_SEND
        CUR5:
        SJMP CURSOR_END
        CURSOR_SEND:

        LCALL SEND_I
    	MOV	A,#12H
	LCALL	SEND_D
        CURSOR_END:
        RET
       NNFINISH: RET

FANG_WATER:
MOV A,LCD_MODE
CJNE A,#7,stopbuf2
 MOV A,WATERANANUM
 CJNE A,#20,FANG1
 FANG:
  MOV LCD_MODE,#8
 FANG1:
 JC FANG
 SJMP STOPBUF2
STOPBUF2:
 RET
 
 
 
WATERLEVELDO:

MOV A,LCD_MODE
CJNE A,#5,stopbuf

SJMP DID0
stopbuf:
LJMP STOPPP
DID0:
    MOV A,WATERLEVEL
    CJNE A,#1,DID1
    MOV A,WATERANANUM
    CJNE A,#25,DA1
    DA11:
    MOV LCD_MODE,#6

    LJMP STOPPP
    DA1:
    JNC DA11
    LJMP STOPPP
DID1:
     CJNE A,#2,DID2
    MOV A,WATERANANUM
    CJNE A,#50,DA2
    DA22:
    MOV LCD_MODE,#6
    LJMP STOPPP
    DA2:
    JNC DA22
    LJMP STOPPP
DID2:
     CJNE A,#3,DID3
    MOV A,WATERANANUM
    CJNE A,#75,DA3
    DA33:
    MOV LCD_MODE,#6
    LJMP STOPPP
    DA3:
    JNC DA33
    LJMP STOPPP
DID3:
     CJNE A,#4,DID4
    MOV A,WATERANANUM
    CJNE A,#100,DA1
    DA44:
    MOV LCD_MODE,#6
    LJMP STOPPP
    DA4:
    JNC DA44
    LJMP STOPPP
DID4:
     CJNE A,#5,DID5
    MOV A,WATERANANUM
    CJNE A,#130,DA5
    DA55:
    MOV LCD_MODE,#6
    LJMP STOPPP
    DA5:
    JNC DA55
    LJMP STOPPP
DID5:
     CJNE A,#6,DID6
    MOV A,WATERANANUM
    CJNE A,#160,DA1
    DA66:
    MOV LCD_MODE,#6
    LJMP STOPPP
    DA6:
    JNC DA66
    LJMP STOPPP
DID6:
     CJNE A,#7,DID7
    MOV A,WATERANANUM
    CJNE A,#190,DA1
    DA77:
    MOV LCD_MODE,#6
    LJMP STOPPP
    DA7:
    JNC DA77
    LJMP STOPPP
DID7:
     CJNE A,#8,DID8
    MOV A,WATERANANUM
    CJNE A,#220,DA1
    DA88:
    MOV LCD_MODE,#6
    LJMP STOPPP
    DA8:
    JNC DA88
    LJMP STOPPP
DID8:
     CJNE A,#9,DID9
    MOV A,WATERANANUM
    CJNE A,#250,DA9
    DA99:
    MOV LCD_MODE,#6
    LJMP STOPPP
    DA9:
    JNC DA99
    LJMP STOPPP
DID9:
    CJNE A,#0,DID10
    MOV A,WATERANANUM
    CJNE A,#10,DAP
    DAPP:
    MOV LCD_MODE,#6

    LJMP STOPPP
    DAP:
    JNC DAPP
    LJMP STOPPP
DID10:
STOPPP:
RET

 MMFINISH:
;;LCD DISPLAY

DISP:
	MOV	COUNT,#10H     ;显示8个字符
	MOV	A,#90H          ;起始地址
	LCALL 	SEND_I

        MOV A, LCD_MODE
        CJNE A,#1,LCD_CHOOSE
        CJNE A,LAST_LCD_MODE,LCD1
        LJMP DISP_RET
        LCD1:
        MOV LAST_LCD_MODE,LCD_MODE
        MOV	A,#01H		;清除显示
        LCALL SEND_I

	MOV	DPTR,#TABZ2      ;;显示汉字和字符
	MOV	COUNT,#40H     ;显示32个字符
	MOV	A,#80H         ;起始地址
	LCALL 	SEND_I
	LCALL 	DISP_HZ
        RET
        TABZ2:    DB  '  包式洗衣机    '
          DB  '  联系电话      '
          DB  '  只洗鸡  不洗衣'
          DB  '  18868151056   '

LCD_CHOOSE:
           MOV A, LCD_MODE
        CJNE A,#2,LCD2
        CJNE A,LAST_LCD_MODE,LCDcc
        LJMP DISP_RET
        LCDcc:
        MOV LAST_LCD_MODE,LCD_MODE
        MOV	A,#01H		;清除显示
        LCALL SEND_I

	MOV	DPTR,#TABZcc      ;;显示汉字和字符
	MOV	COUNT,#40H     ;显示32个字符
	MOV	A,#80H         ;起始地址
	LCALL 	SEND_I
	LCALL 	DISP_HZ
        RET
        TABZcc:    DB  '  1 restart     '
                   DB  '  is up to you  '
                   DB  '  2 continnue   '
                   DB  '                '
   

LCD2:
        MOV A, LCD_MODE
       CJNE A,#3,LCD3BUF
        CJNE A,LAST_LCD_MODE,DISP2
        LJMP DISP_21
        DISP2:
        MOV LAST_LCD_MODE,LCD_MODE
        MOV	A,#01H		;清除显示
        LCALL SEND_I
	MOV	DPTR,#TABZ3      ;;显示汉字和字符
	MOV	COUNT,#40H     ;显示32个字符
	MOV	A,#80H         ;起始地址
	LCALL 	SEND_I
	LCALL 	DISP_HZ
        SJMP DISP_21

        LCD3BUF:
        LJMP LCD3
        DISP_21:
        MOV R0,#XIYICISHU
    	MOV	A,#86H
        LCALL SEND_I
        MOV    A, @R0
        MOV B,#10
        DIV AB
         ORL A,#30H
	LCALL	SEND_D
        MOV A,B
        ORL A,#30H
        LCALL SEND_D
        MOV R0,#XIYITIMER
    	MOV	A,#96H
        LCALL SEND_I
       MOV    A, @R0
        MOV B,#10
        DIV AB
         ORL A,#30H
	LCALL	SEND_D
        MOV A,B
        ORL A,#30H
        LCALL SEND_D

        MOV R0,#TUOSHUITIMER
    	MOV	A,#8EH
        LCALL SEND_I
        MOV    A, @R0
        MOV B,#10
        DIV AB
         ORL A,#30H
	LCALL	SEND_D
        MOV A,B
        ORL A,#30H
        LCALL SEND_D

        MOV R0,#DISP_BUF+2
        MOV A,#9CH
        LCALL SEND_I
        MOV COUNT,#3
        LPP:
        MOV A,@R0
        INC R0
        LCALL SEND_D
        DJNZ COUNT,LPP
        RET
        TABZ3:    DB  '  洗衣次数：  次'
                  DB  '  脱水时间：  分'
                  DB  '  洗衣时间：  分'
                  DB  '  水位：    /255'
LCD3:
       MOV A, LCD_MODE
       CJNE A,#4,LCD4BUF
       CJNE A,LAST_LCD_MODE,DISP3
       SJMP DISP_31
       DISP3:
        MOV LAST_LCD_MODE,LCD_MODE
        MOV	A,#01H		;清除显示
        LCALL SEND_I
	MOV	DPTR,#TABZ4      ;;显示汉字和字符
	MOV	COUNT,#40H     ;显示32个字符
	MOV	A,#80H         ;起始地址
	LCALL 	SEND_I
	LCALL 	DISP_HZ
        SJMP DISP_31
        LCD4BUF:
        LJMP LCD4
        DISP_31:
        MOV R0,#WATERLEVEL
    	MOV	A,#86H
        LCALL SEND_I
        MOV    A, @R0
        MOV B,#10
        DIV AB
         ORL A,#30H
	LCALL	SEND_D
        MOV A,B
        ORL A,#30H
        LCALL SEND_D

        MOV R0,#DISP_BUF+2
        MOV A,#9CH
        LCALL SEND_I
        MOV COUNT,#3
        LPP2:
        MOV A,@R0
        INC R0
        LCALL SEND_D
        DJNZ COUNT,LPP2
        RET
                TABZ4:    DB  '  加水等级：    '
                          DB  '  可选择：1-9   '
                          DB  '                '
                          DB  '  水位：    /255'
LCD4:
       MOV A, LCD_MODE
       CJNE A,#5,LCD5BUF
       CJNE A,LAST_LCD_MODE,DISP4
       SJMP DISP_41
       DISP4:
        MOV LAST_LCD_MODE,LCD_MODE
        MOV	A,#01H		;清除显示
        LCALL SEND_I
	MOV	DPTR,#TABZ5      ;;显示汉字和字符
	MOV	COUNT,#40H     ;显示32个字符
	MOV	A,#80H         ;起始地址
	LCALL 	SEND_I
	LCALL 	DISP_HZ
        SJMP DISP_41
        LCD5BUF:
        LJMP LCD5

        DISP_41:
        MOV R0,#WATERLEVEL
    	MOV	A,#86H
        LCALL SEND_I
        MOV    A, @R0
        MOV B,#10
        DIV AB
         ORL A,#30H
	LCALL	SEND_D
        MOV A,B
        ORL A,#30H
        LCALL SEND_D

        MOV R0,#DISP_BUF+2
        MOV A,#9CH
        LCALL SEND_I
        MOV COUNT,#3
        LPP3:
        MOV A,@R0
        INC R0
        LCALL SEND_D
        DJNZ COUNT,LPP3

        MOV R0,#XIYITIMER
    	MOV	A,#8EH
        LCALL SEND_I
        MOV    A, @R0
        MOV B,#10
        DIV AB
         ORL A,#30H
	LCALL	SEND_D
        MOV A,B
        ORL A,#30H
        LCALL SEND_D
         RET
         TABZ5:           DB  '  加水等级：    '
                          DB  'next洗衣：    分'
                          DB  '  正在加水中…  '
                          DB  '  水位：    /255'

LCD5:
       MOV A, LCD_MODE
       CJNE A,#6,LCD6BUF
       CJNE A,LAST_LCD_MODE,DISP5
       SJMP DISP_51
       DISP5:
       MOV A,XIYICISHU
      CJNE A,#0,KKBEGIN
       MOV LCD_MODE,#9
         LJMP GG1
        KKBEGIN:
        MOV LAST_LCD_MODE,LCD_MODE
        MOV	A,#01H		;清除显示
        LCALL SEND_I
	MOV	DPTR,#TABZ6      ;;显示汉字和字符
	MOV	COUNT,#40H     ;显示32个字符
	MOV	A,#80H         ;起始地址
	LCALL 	SEND_I
	LCALL 	DISP_HZ
        SJMP DISP_51
        LCD6BUF:
        LJMP LCD6

        DISP_51:
        MOV R0,#XIYICISHU
    	MOV	A,#95H
        LCALL SEND_I
        MOV    A, @R0
        MOV B,#10
        DIV AB
         ORL A,#30H
	LCALL	SEND_D
        MOV A,B
        ORL A,#30H
        LCALL SEND_D
        
        MOV R0 ,#LED_BUF1
        MOV COUNT,#2
        MOV A,#84H
        LCALL SEND_I
        CIR1:  MOV A,@R0
           INC R0
           ORL A,#30H
           LCALL SEND_D
           DJNZ COUNT,CIR1
        
        MOV R0,#LED_BUF1+2
        MOV COUNT,#2
        MOV A,#86H
        LCALL SEND_I
        CIR2:MOV A,@R0
        ORL A,#30H
           INC R0
           LCALL SEND_D
           DJNZ COUNT,CIR2
        GG1:
        RET
        TABZ6:            DB  '洗衣：    分  秒'
                          DB  'next  放水      '
                          DB  '剩余次数：      '
                          DB  '                '
LCD6:
        MOV A, LCD_MODE
       CJNE A,#7,LCD7BUF
       CJNE A,LAST_LCD_MODE,DISP6
       SJMP DISP_61
       DISP6:
        MOV LAST_LCD_MODE,LCD_MODE
        MOV	A,#01H		;清除显示
        LCALL SEND_I
	MOV	DPTR,#TABZ7      ;;显示汉字和字符
	MOV	COUNT,#40H     ;显示32个字符
	MOV	A,#80H         ;起始地址
	LCALL 	SEND_I
	LCALL 	DISP_HZ
        SJMP DISP_61
        LCD7BUF:
        LJMP LCD7

        DISP_61:
        
        MOV R0,#TUOSHUITIMER
    	MOV	A,#8EH
        LCALL SEND_I
        MOV    A, @R0
        MOV B,#10
        DIV AB
         ORL A,#30H
	LCALL	SEND_D
        MOV A,B
        ORL A,#30H
        LCALL SEND_D
        
        MOV R0,#XIYICISHU
    	MOV	A,#96H
        LCALL SEND_I
        MOV    A, @R0
        MOV B,#10
        DIV AB
         ORL A,#30H
	LCALL	SEND_D
        MOV A,B
        ORL A,#30H
        LCALL SEND_D
        
        MOV R0,#DISP_BUF+2
        MOV A,#9CH
        LCALL SEND_I
        MOV COUNT,#3
        LPP4:
        MOV A,@R0
        INC R0
        LCALL SEND_D
        DJNZ COUNT,LPP4
        
         RET
        TABZ7:            DB  '  当前放水中    '
                          DB  'next脱水：    分'
                          DB  '剩余次数：      '
                          DB  '  水位：    /255'



LCD7:
        MOV A, LCD_MODE
        CJNE A,#8,LCD8BUF
        CJNE A,LAST_LCD_MODE,DISP7
        SJMP DISP_71
        DISP7:
        MOV LAST_LCD_MODE,LCD_MODE
        MOV	A,#01H		;清除显示
        LCALL SEND_I
	MOV	DPTR,#TABZ8      ;;显示汉字和字符
	MOV	COUNT,#40H     ;显示32个字符
	MOV	A,#80H         ;起始地址
	LCALL 	SEND_I
	LCALL 	DISP_HZ
        SJMP DISP_71
        LCD8BUF:
        LJMP LCD8

        DISP_71:
        MOV R0,#XIYICISHU
    	MOV	A,#96H
        LCALL SEND_I
        MOV    A, @R0
        MOV B,#10
        DIV AB
         ORL A,#30H
	LCALL	SEND_D
        MOV A,B
        ORL A,#30H
        LCALL SEND_D
        
        
        MOV R0 ,#LED_BUF2
        MOV COUNT,#2
        MOV A,#84H
        LCALL SEND_I
        CIR3:  MOV A,@R0
           INC R0
           ORL A,#30H
           LCALL SEND_D
           DJNZ COUNT,CIR3
        
        MOV R0,#LED_BUF2+2
        MOV COUNT,#2
        MOV A,#86H
        LCALL SEND_I
        CIR4:MOV A,@R0
        ORL A,#30H
           INC R0
           LCALL SEND_D
           DJNZ COUNT,CIR4
        RET
        TABZ8:            DB  '脱水：    分  秒'
                          DB  'next结束or重来  '
                          DB  '剩余次数：      '
                          DB  '                '

 LCD8:  MOV A, LCD_MODE
        CJNE A,#9,LCD9
        CJNE A,LAST_LCD_MODE,DISP8
      
        DISP8:
        MOV LAST_LCD_MODE,LCD_MODE
        MOV	A,#01H		;清除显示
        LCALL SEND_I
	MOV	DPTR,#TABZ9      ;;显示汉字和字符
	MOV	COUNT,#40H     ;显示32个字符
	MOV	A,#80H         ;起始地址
	LCALL 	SEND_I
	LCALL 	DISP_HZ
        RET
        TABZ9:            DB  '  欢迎使用      '
                          DB  '  永远为你们    '
                          DB  '  包包世界的大门'
                          DB  '    敞开哦      '

 LCD9:
DISP_RET:
RET




;;ADC
READ_ADC:
        CLR     AD_WR
        NOP
        NOP
        NOP
        SETB    AD_WR
        MOV     P0,#0FFH
        LCALL   DELAY2MS
        CLR     AD_RD
        NOP
        NOP
        NOP
        MOV     A,P0
        SETB    AD_RD
        MOV     B,#100
        MOV WATERANANUM,A
        DIV     AB
        ORL     A,#30H
        MOV     DISP_BUF+2,A
        MOV     A,B
        MOV     B,#10
        DIV     AB
        ORL     A,#30H
        MOV     DISP_BUF+3,A
        ORL     B,#30H
        MOV     DISP_BUF+4,B


        RET

;;LCD初始化
INI_LCD:

        CLR  	RST
        SETB 	RST
        NOP
        SETB 	PSB                ;***8位数据并口
;**初始化*******
        MOV	A,#30H	     ;30H―基本指令操作
        LCALL SEND_I

        MOV	A,#30H       ;30H--基本指令操作
        LCALL SEND_I

        MOV	A,#0CH	      ;开显示,关光标,不闪烁
        LCALL SEND_I

        MOV	A,#01H		;清除显示
        LCALL SEND_I

        MOV	A,#06H		;指定在写入或读取数据时，光标的移动方向
        LCALL SEND_I        ;DDRAM 的地址计数器(AC)加1
        RET

;LCD 显示
DISP_LCD1:

        MOV	A,#01H		;清除显示
        LCALL SEND_I

	MOV	DPTR,#TABZ1      ;;显示汉字和字符
	MOV	COUNT,#40H     ;显示32个字符
	MOV	A,#80H          ;起始地址
	LCALL 	SEND_I
	LCALL 	DISP_HZ
	RET



TABZ1:    DB  '  欢迎来到      '
          DB  '  包包洗衣世界  '
          DB  '                '
          DB  '                '





;写指令子程序
;RS=0,RW=0,E=高脉冲,D0-D7=指令码
;********************************************************
SEND_I:
	    LCALL CHK_BUSY
	    CLR	 RS
	    CLR	 RW
	    MOV	P0,A
	    SETB E
	    NOP
	    NOP
	    CLR	 E
	    RET


; ;写数据子程序
;RS=1,RW=0,E=高脉冲,D0-D7=数据
;**********************************************************
SEND_D:
	    LCALL	CHK_BUSY
	    SETB	RS
	    CLR	   RW
	    MOV	   P0,A
	    SETB   E
	    NOP
	    NOP
	    CLR	   E
	    RET

;测忙子程序
;RS=0,RW=1,E=H,D0-D7=状态字
;*********************************************************
CHK_BUSY:
    	   MOV	P0,#0FFH    ;测忙碌子程序
	   CLR	RS
	   SETB	RW
	   SETB	E
	   JB	P0.7,$
	   CLR	E
	   RET

 ;显示汉字或字符
;DPTR 字符串位置，COUNT：长度
;*********************************************************
DISP_HZ:
    	 CLR	A
         MOVC	A,@A+DPTR
	 LCALL	SEND_D
	 INC	DPTR
	 DJNZ	COUNT,DISP_HZ
	 RET







;;定时器中断
TIMER0_INT:
        PUSH    ACC
        PUSH    PSW
        PUSH    DPL
        PUSH    DPH
        
        LCALL   KEY_SCAN
        LCALL  BACK_TIMER1
        LCALL   DISP_TIMER1
                LCALL  BACK_TIMER2
        LCALL   DISP_TIMER2       ;;时钟放入显示缓冲
        LCALL   MOTOR
;        LCALL   SET_CURSOR       ;;显示光标

        POP     DPH
        POP     DPL
        POP     PSW
        POP     ACC
        RETI

;;内部时钟运行
;;INPUT:NONE
;;OUTPUT:TIP,SECOND,MINUTE,HOUR
;;INFLUENCED:ACC

TIMER:
        MOV     TH0,#0F8H
        MOV     TL0,#30H               ;;2mS
;;2ms计数加1
        INC     T_2MS
        MOV     A,T_2MS
        CLR     C
        SUBB    A,#50
        JC      TIMER0_RET
        MOV     T_2MS,A
;;100ms计数加1
        INC     T_100MS
        MOV     A,T_100MS
        CLR     C
        SUBB    A,#10
        JC      TIMER0_RET
        MOV     T_100MS,A
;;秒计数加1
        INC     SECOND
        MOV     A,SECOND
        CLR     C
        SUBB    A,#60
        JC      TIMER0_RET
        MOV     SECOND,A
;;分钟计数加1
        INC     MINUTE
        MOV     A,MINUTE
        CLR     C
        SUBB    A,#60
        JC      TIMER0_RET
        MOV     MINUTE,A

TIMER0_RET:
        RET

BACK_TIMER1:
        MOV  A,LCD_MODE
        CJNE A,#6,NOTDOBACK1
        SJMP DOBACKTIME
        NOTDOBACK1:
        LJMP TIMER00_RET
        DOBACKTIME:
        MOV     TH0,#0F8H
        MOV     TL0,#30H               ;;2mS
;;2ms计数加1
        INC     T_2MS
        MOV     A,T_2MS
        CLR     C
        SUBB    A,#50
        JC      TIMER00_RET
        MOV     T_2MS,A
;;100ms计数加1
        INC     T_100MS
        MOV     A,T_100MS
        CLR     C
        SUBB    A,#10
        JC      TIMER00_RET
        MOV     T_100MS,A
;;秒计数减1
        CLR   C
        MOV A,SECOND
        CJNE A,#0,NOTZERO
        
        ZERO:
         
           MOV SECOND,#59
           SJMP FENMINUS
           NOTZERO:
             DEC A
          MOV SECOND,A
           SJMP TIMER00_RET 

;;分钟计数减1
        FENMINUS:
         CLR   C
        MOV A,XIYITIMER
        CJNE A,#0,NOTZERO1
        
        ZERO1:
           MOV XIYITIMER,XIYITIMER2
           MOV SECOND,#0
           MOV LCD_MODE,#7
           SJMP TIMER00_RET
           NOTZERO1:
             DEC A
            MOV XIYITIMER,A
           SJMP TIMER00_RET 

TIMER00_RET:
        RET
        
BACK_TIMER2:
        MOV  A,LCD_MODE
        CJNE A,#8,NOTDOBACK2
        SJMP DOBACKTIME2
        NOTDOBACK2:
        LJMP TIMER01_RET
        DOBACKTIME2:
        MOV     TH0,#0F8H
        MOV     TL0,#30H               ;;2mS
;;2ms计数加1
        INC     T_2MS
        MOV     A,T_2MS
        CLR     C
        SUBB    A,#50
        JC      TIMER00_RET
        MOV     T_2MS,A
;;100ms计数加1
        INC     T_100MS
        MOV     A,T_100MS
        CLR     C
        SUBB    A,#10
        JC      TIMER00_RET
        MOV     T_100MS,A
;;秒计数减1
        CLR   C
        MOV A,SECOND
        CJNE A,#0,NOTZERO2
         
           MOV SECOND,#59
           SJMP FENMINUS2
           NOTZERO2:
             DEC A
          MOV SECOND,A
           SJMP TIMER01_RET 

;;分钟计数减1
        FENMINUS2:
         CLR   C
        MOV A,TUOSHUITIMER
        CJNE A,#0,NOTZERO22
        
        ZERO22:
           DEC XIYICISHU
           MOV A,XIYICISHU
           CJNE A,#0,FUWEI
           MOV LCD_MODE,#9
           MOV SECOND,#0
           SJMP TIMER01_RET
           FUWEI:
           MOV LCD_MODE,#5
            MOV TUOSHUITIMER,TUOSHUITIMER2
            MOV SECOND,#0
           SJMP TIMER01_RET
           NOTZERO22:
             DEC A
            MOV TUOSHUITIMER,A
           SJMP TIMER01_RET 

TIMER01_RET:
        RET

;;显示时间，将显示数据放入显示缓冲区
;;INPUT:SECOND,MINUTE,HOUR
;;OUTPUT:LED_BUF
;;INFLUENCED:ACC，B，R0
DISP_TIMER1:
        MOV     R0,#LED_BUF1


        MOV     A,XIYITIMER
        MOV     B,#10
        DIV     AB
        MOV     @R0,A
        INC     R0
        MOV     @R0,B
        INC     R0               ;;DISPLAY MINUTE


        MOV     A,SECOND
        MOV     B,#10
        DIV     AB
        MOV     @R0,A
        INC     R0
        MOV     @R0,B            ;;DISPLAY SECOND


        RET

DISP_TIMER2:
        MOV     R0,#LED_BUF2


        MOV     A,TUOSHUITIMER
        MOV     B,#10
        DIV     AB
        MOV     @R0,A
        INC     R0
        MOV     @R0,B
        INC     R0               ;;DISPLAY MINUTE


        MOV     A,SECOND
        MOV     B,#10
        DIV     AB
        MOV     @R0,A
        INC     R0
        MOV     @R0,B            ;;DISPLAY SECOND


        RET
;;DELAY 2ms
DELAY2MS:
        MOV     DELH,#2
DELAY2:
        MOV     DELL,#250
DELAY1:
        NOP
        NOP
        DJNZ    DELL,DELAY1
        DJNZ    DELH,DELAY2
        RET




MOTOR:
        INC     JIQI_DELAY
        MOV     A,JIQI_DELAY
        CJNE    A,#250,MOT_GO
         CPL B_FORWARD

        MOV JIQI_DELAY,#0
        MOT_GO:

        JNB     B_MOTOR,STOP_MOTOR1
        MOV A,  LCD_MODE
        CJNE A,#6,OTHERMODE
        INC     MOTOR_DELAY
        MOV     A,MOTOR_DELAY
        CJNE    A,#10,MOT_NEXT          ;;慢速定时16ms
MOT_NEXT:
        JC      MOTOR_RET1
        MOV     MOTOR_DELAY,#0
        JNB     B_FORWARD,BACK_ROTATE


        MOV     A,MOTOR_STEP
        INC     MOTOR_STEP
        JNZ     STEP_MF1
        SETB    MOTOR_P1
        SETB    MOTOR_P2
        CLR     MOTOR_P3
        CLR     MOTOR_P4
MOTOR_RET1:
        RET
STEP_MF1:
        CJNE    A,#1,STEP_MF2
        SETB    MOTOR_P1
        CLR     MOTOR_P2
        CLR     MOTOR_P3
        SETB    MOTOR_P4
        RET

STEP_MF2:
        CJNE    A,#2,STEP_MF3
        CLR     MOTOR_P1
        CLR     MOTOR_P2
        SETB    MOTOR_P3
        SETB    MOTOR_P4
        RET
STEP_MF3:
        CLR     MOTOR_P1
        SETB    MOTOR_P2
        SETB    MOTOR_P3
        CLR     MOTOR_P4
        MOV     MOTOR_STEP,#0
        RET

BACK_ROTATE:
        MOV     A,MOTOR_STEP
        INC     MOTOR_STEP
        JNZ     STEP_MB1
        CLR     MOTOR_P1
        SETB    MOTOR_P2
        SETB    MOTOR_P3
        CLR     MOTOR_P4
MOTOR_RET2:
        RET
STEP_MB1:
        CJNE    A,#1,STEP_MB2
        CLR     MOTOR_P1
        CLR     MOTOR_P2
        SETB    MOTOR_P3
        SETB    MOTOR_P4
        RET

STEP_MB2:
        CJNE    A,#2,STEP_MB3
        SETB    MOTOR_P1
        CLR     MOTOR_P2
        CLR     MOTOR_P3
        SETB    MOTOR_P4
        RET
STEP_MB3:
        SETB    MOTOR_P1
        SETB    MOTOR_P2
        CLR     MOTOR_P3
        CLR     MOTOR_P4
        MOV     MOTOR_STEP,#0
        RET

STOP_MOTOR1:
        CLR     MOTOR_P1
        CLR     MOTOR_P2
        CLR     MOTOR_P3
        CLR     MOTOR_P4
        RET


OTHERMODE:
        CJNE A,#8,STOP_MOTOR2
        SETB B_FORWARD
        INC     MOTOR_DELAY
        MOV     A,MOTOR_DELAY
        CJNE    A,#4,MOT_NEXT2        ;;快速定时8ms
MOT_NEXT2:
        JC      MOTOR_RET3
        MOV     MOTOR_DELAY,#0
        MOV     A,MOTOR_STEP
        INC     MOTOR_STEP
        JNZ     STEP_MFF1
        SETB    MOTOR_P1
        SETB    MOTOR_P2
        CLR     MOTOR_P3
        CLR     MOTOR_P4
MOTOR_RET3:
        RET
STEP_MFF1:
        CJNE    A,#1,STEP_MFF2
        SETB    MOTOR_P1
        CLR     MOTOR_P2
        CLR     MOTOR_P3
        SETB    MOTOR_P4
        RET

STEP_MFF2:
        CJNE    A,#2,STEP_MFF3
        CLR     MOTOR_P1
        CLR     MOTOR_P2
        SETB    MOTOR_P3
        SETB    MOTOR_P4
        RET
STEP_MFF3:
        CLR     MOTOR_P1
        SETB    MOTOR_P2
        SETB    MOTOR_P3
        CLR     MOTOR_P4
        MOV     MOTOR_STEP,#0
        RET


STOP_MOTOR2:
        CLR     MOTOR_P1
        CLR     MOTOR_P2
        CLR     MOTOR_P3
        CLR     MOTOR_P4
        RET




;;按键处理
;;INPUT:KEYCODE
;;OUTPUT:
;;INFLUENCED:ACC
;;
DO_KEY:
        MOV     A,KEYCODE
        CJNE    A,#0FFH,KEY_N
        RET
KEY_N:
        CLR C
        CJNE    A,#9,KEY_JUDGEBUF
        NUMBER1_DEAL:
        MOV A,LCD_MODE
        CJNE A,#3,FINAL1
        MOV A,ROWSET

        CJNE A,#1,CAL_2
        MOV A,XIYICISHU
        CLR C
        CJNE A,#9,GOFINAL1
        REDO1:
        MOV B,#10
        MUL AB
        ADD A,KEYCODE
        MOV XIYICISHU,A
        GOFINAL1:
        JC  REDO1
        LJMP FINAL
        KEY_JUDGEBUF:LJMP KEY_JUDGE
        CAL_2:
        CJNE A,#2,CAL_3
        MOV A,XIYITIMER
        CLR C
        CJNE A,#9,GOFINAL2
        REDO2:
        MOV B,#10
        MUL AB
        ADD A,KEYCODE
        MOV XIYITIMER,A
        MOV XIYITIMER2,A
        GOFINAL2:
        JC REDO2
        LJMP FINAL
        
         CAL_3:
        CJNE A,#3,CAL_4
        MOV A,TUOSHUITIMER
         CLR C
        CJNE A,#9,GOFINAL3
        REDO3:
        MOV B,#10
        MUL AB
        ADD A,KEYCODE
        MOV TUOSHUITIMER,A
        MOV TUOSHUITIMER2,A
        GOFINAL3:
        JC REDO3
        LJMP FINAL
        CAL_4:

FINAL1:
        CJNE A,#4, FINAL2
        MOV WATERLEVEL,KEYCODE
        SJMP FINAL
FINAL2:
       CJNE A,#2,FINAL3
       MOV A,KEYCODE
       CJNE A,#1,CONTIN1
       MOV LCD_MODE,#3
       SJMP FINAL
       CONTIN1:
       CJNE A,#2,CONTIN2
       MOV LCD_MODE,68H
       MOV XIYICISHU,69H
       MOV XIYITIMER,6AH
       MOV XIYITIMER2,6BH
       MOV TUOSHUITIMER,6CH
       MOV TUOSHUITIMER2,6DH
       MOV WATERLEVEL,6EH
       MOV SECOND,6FH
       SJMP FINAL
       CONTIN2:
       SJMP FINAL
FINAL3:
FINAL:
        LJMP    KEY_RET

KEY_JUDGE:
        JC NUMBER1
         SJMP KEY_A
        NUMBER1: LJMP  NUMBER1_DEAL

KEY_A:  CJNE    A,#0AH,KEY_B
        mov A,  LCD_MODE
        INC A
        MOV LCD_MODE,A
          SJMP KEY_RET
KEY_B:   CJNE    A,#0BH,KEY_C
        mov A,  LCD_MODE
        DEC A
        MOV LCD_MODE,A
          SJMP KEY_RET

KEY_C:   CJNE    A,#0CH,KEY_D
        mov A, ROWSET
        DEC A
        MOV ROWSET,A
          SJMP KEY_RET
KEY_D:CJNE A,#0DH,KEY_E
      MOV A,ROWSET
         INC A
          MOV ROWSET,A
          SJMP KEY_RET
KEY_E:
CJNE A,#0EH,KEY_F
MOV A,LCD_MODE
CJNE A,#3,QING0
MOV A,ROWSET
CJNE A,#1,CLL2
MOV XIYICISHU,#0
SJMP FIN
CLL2:
CJNE A,#2,CLL3
MOV XIYITIMER,#0
SJMP FIN
CLL3:
CJNE A,#3,CLL4
MOV TUOSHUITIMER,#0
SJMP FIN
CLL4:
FIN:
SJMP KEY_RET
QING0:
MOV LCD_MODE,#1
SJMP KEY_RET
KEY_F:
CJNE A,#0FH,KEY_RET
MOV A,LCD_MODE
CJNE A,#15,ZANTING
MOV LCD_MODE,50H
SJMP KEY_RET
ZANTING:
MOV 50H,LCD_MODE
MOV LCD_MODE,#15
KEY_RET:
        MOV     KEYCODE,#0FFH
        RET


;;keyboard scanning
;;INPUT:P1，P2
;;OUTPUT:KEYCODE
;;INFLUENCED:LASTCODE
;;           N_SAME - The number of continuous sampling
KEY_SCAN:
        MOV     P1,#0F0H                               ;line scanning
        NOP
        MOV     A,P1
        ANL     A,#0F0H                                ;row scanning
        MOV     B,A
        MOV     P1,#0FH
        NOP
        MOV     A,P1
        ANL     A,#0FH
        ORL     A,B
        MOV     DPTR,#TAB_KEY                           ;look up the table
        MOVC    A,@A+DPTR
                                                        ;set breaking point hereby to get the position in the table
        CJNE    A,LASTCODE,GET_NEW_KEY
        MOV     A,N_SAME
        CJNE    A,#3,GET_NEXT                           ;judging the times of sampling to ensure a new code
;;new code
        MOV     KEYCODE,LASTCODE                        ;replace the last code with the new code
KEY_EXIT:
        INC     N_SAME
        RET
GET_NEXT:
        JC      KEY_EXIT
        RET
GET_NEW_KEY:
        MOV     LASTCODE,A
        MOV     N_SAME,#0
        RET
;position of 16 keys；77H,7BH,7DH,7EH
;                     B7H,BBH,BDH,BEH
;                     D7H,DBH,DDH,DEH
;                     E7H,EBH,EDH,EEH
TAB_KEY:
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;0-10H
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;10-1FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;20-2FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;30-3FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;40-4FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;50-5FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH ;60-6FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,01H,0FFH,0FFH,0FFH,05H,0FFH,09H,0CH,0FFH ;70-7FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH  ;80-8FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH  ;90-9FH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH  ;A0-AFH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,02H,0FFH,0FFH,0FFH,06H,0FFH,00H,0DH,0FFH  ;B0-BFH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH  ;C0-CFH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,03H,0FFH,0FFH,0FFH,07H,0FFH,0AH,0EH,0FFH  ;D0-DFH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,04H,0FFH,0FFH,0FFH,08H,0FFH,0BH,0FH,0FFH  ;E0-EFH
        DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH  ;F0-FFH











START:
                SETB     SDA                       ;发送起始条件的数据信号
                NOP
                SETB     SCL                       ;发送起始条件的时钟信号
                NOP                                ;起始条件建立时间大于4US
                NOP
                NOP
                NOP
                NOP
                CLR      SDA                       ;发送起始信号
                NOP                                     ;起始条件锁定时间大于4US
                NOP
                NOP
                NOP
                NOP
                CLR      SCL                       ;钳住IIC总线,准备发送或接收数据
                RET

STOP:
                CLR      SDA                       ;发送停止条件的数据信号
                NOP
                SETB     SCL                       ;发送停止条件的时钟信号
                NOP                                ;起始条件建立时间大于4US
                NOP
                NOP
                NOP
                NOP
                SETB     SDA                       ;发送IIC总线停止信号
                NOP
                NOP
                NOP
                NOP
                RET

;;接收应答
;;====================================================================
ACKN:
	SETB	SDA
	SETB	SCL
	NOP
	JB	SDA,	$
	NOP
	NOP
	CLR	SCL
	RET

ACKS:
	CLR	SDA
	NOP
	NOP
	NOP
	SETB	SCL
	NOP
	NOP
	NOP
	NOP
	CLR	SCL
	RET

;;名称: RBYTE
;;功能: READ ONE BYTE DATA FROM 24C16
;;输入: (无)
;;输出: A
;;--------------------------------------------------------------------------
;;调用: (无)
;;--------------------------------------------------------------------------
;;影响: A,R0
;;堆栈: 2
;;--------------------------------------------------------------------------
;;参数说明:
;;		A:接收数据(1字节)
;;--------------------------------------------------------------------------
;;注意:
;;--------------------------------------------------------------------------
RBYTE:
	SETB	SDA
	MOV	R0,	#8
XRB1:
	SETB	SCL
	NOP
	NOP
	NOP
	MOV	C,	SDA
	CLR	SCL
	RLC	A
	NOP
	NOP
	DJNZ	R0,	XRB1
	RET

;;名称: WBYTE
;;功能: WRITE ONE BYTE DATA TO 24C16
;;输入: A
;;输出: (无)
;;--------------------------------------------------------------------------
;;调用: (无)
;;--------------------------------------------------------------------------
;;影响: A,R0
;;堆栈: 2
;;--------------------------------------------------------------------------
;;参数说明:
;;		A:发送数据(1字节)
;;--------------------------------------------------------------------------
;;注意:
;;--------------------------------------------------------------------------
WBYTE:
	MOV	R0,#8
XWB1:
	RLC	A
	NOP
	NOP
	MOV	SDA,C
	NOP
	SETB	SCL
	NOP
               NOP
	NOP
	NOP
	NOP
	CLR	SCL
	DJNZ	R0,XWB1
	RET

;;名称: W24C
;;功能: WRITE DATA TO 24C16
;;输入: SADD,R1,R2
;;输出: (无)
;;--------------------------------------------------------------------------
;;调用: START,WBYTE,ACKN,STOP
;;--------------------------------------------------------------------------
;;影响: A,R1,R2
;;堆栈: 4
;;--------------------------------------------------------------------------
;;参数说明:
;;		SADDH,SADDL:24C16 ADDRESS
;;		R2:WRITE NUMBER
;;		R1:RAM ADDRESS POINTER
;;--------------------------------------------------------------------------
;;注意:
;;--------------------------------
W24C:
        LCALL	START			;IIC起始信号
        MOV     	A,      SADDH
        RL     	A
	ORL	A,	#0A0H
	LCALL	WBYTE			;写命令字节
	LCALL	ACKN			;收应答
	MOV	A,	SADDL
	LCALL	WBYTE			;写2416的地址
	LCALL	ACKN			;收应答
WD24:
	MOV	A,	@R1
	INC	R1
	LCALL	WBYTE
	LCALL	ACKN
	DJNZ	R2,	WD24
	LCALL	STOP			;IIC结束信号
	RET

;;--------------------------------------------------------------------------
;;名称: R24C
;;功能: READ DATA FROM 24C16
;;输入: SADD,R1,R2
;;输出: (无)
;;--------------------------------------------------------------------------
;;调用: START,WBYTE,ACKN,RBYTE,STOP
;;--------------------------------------------------------------------------
;;影响: A,R1,R2
;;堆栈: 4
;;--------------------------------------------------------------------------
;;参数说明:
;;		SADD:24C16 ADDRESS
;;		R2:WRITE NUMBER
;;		R1:RAM ADDRESS POINTER
;;--------------------------------------------------------------------------
;;注意:
;;-------------------------
R24C:
	LCALL	START			;IIC起始信号
        MOV     A,      SADDH
       	RL      A
	ORL	A,	#0A0H
	LCALL	WBYTE			;写命令字节
	LCALL	ACKN			;收应答
	MOV	A,	SADDL
	LCALL	WBYTE			;地址字节
	LCALL	ACKN			;收应答
	LCALL	START
       	MOV     A,      SADDH
       	RL      A
	ORL	A,	#0A1H
	LCALL	WBYTE			;读命令字节
	LCALL	ACKN			;收应答
RC24:
        	LCALL   RBYTE			;读2416
	MOV	@R1,A
	INC	R1
	DJNZ	R2,RCX
	LCALL	STOP			;IIC结束信号
	RET
RCX:
	LCALL	ACKS			;发应答
	SJMP	RC24
